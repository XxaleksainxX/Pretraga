class Node:
    """Čvor binarnog pretraživačkog stabla."""
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.left = None
        self.right = None


class BinarySearchTree:
    """Implementacija binarnog pretraživačkog stabla."""
    def __init__(self):
        self.root = None

    def insert(self, key, value):
        """Umetanje novog para (ključ, vrednost) u stablo."""
        if self.root is None:
            self.root = Node(key, value)
        else:
            self._insert_recursive(self.root, key, value)

    def _insert_recursive(self, node, key, value):
        if key < node.key:
            if node.left is None:
                node.left = Node(key, value)
            else:
                self._insert_recursive(node.left, key, value)
        elif key > node.key:
            if node.right is None:
                node.right = Node(key, value)
            else:
                self._insert_recursive(node.right, key, value)
        else:
            node.value = value  # Ažuriraj vrednost ako ključ već postoji.

    def search(self, key):
        """Pretraga vrednosti za dati ključ."""
        return self._search_recursive(self.root, key)

    def _search_recursive(self, node, key):
        if node is None:
            return None  # Ključ nije pronađen
        if key == node.key:
            return node.value
        elif key < node.key:
            return self._search_recursive(node.left, key)
        else:
            return self._search_recursive(node.right, key)

    def inorder(self):
        """Vraća listu elemenata u in-order poretku (sortirano)."""
        elements = []
        self._inorder_recursive(self.root, elements)
        return elements

    def _inorder_recursive(self, node, elements):
        if node is not None:
            self._inorder_recursive(node.left, elements)
            elements.append((node.key, node.value))
            self._inorder_recursive(node.right, elements)


# Generisanje dataset-a i testiranje
import time
import random

# Inicijalizacija stabla
bst = BinarySearchTree()

# Generisanje velikog dataset-a i umetanje u stablo
dataset_size = 1_000_000
keys = [f"key_{i}" for i in range(dataset_size)]
values = [random.randint(1, 100) for _ in range(dataset_size)]

print("Umetanje elemenata u binarno pretraživačko stablo...")
start_time = time.time()
for key, value in zip(keys, values):
    bst.insert(key, value)
end_time = time.time()
print(f"Završeno umetanje. Vreme: {end_time - start_time:.2f} sekundi")

# Testiranje pretraživanja
search_key = "key_500000"
print(f"Pretraga ključa: {search_key}...")
start_time = time.time()
retrieved_value = bst.search(search_key)
end_time = time.time()
if retrieved_value is not None:
    print(f"Pronađena vrednost: {retrieved_value}. Vreme pretrage: {end_time - start_time:.10f} sekundi")
else:
    print(f"Ključ {search_key} nije pronađen. Vreme pretrage: {end_time - start_time:.10f} sekundi")

# Prikaz elemenata u sortiranom poretku (in-order)
print("Prikaz prvih 10 elemenata u sortiranom poretku:")
sorted_elements = bst.inorder()
print(sorted_elements[:10])  # Prikaz prvih 10 elemenata
